import 'dotenv/config';
import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import { searchPesels, addPesel, deletePesel, checkPeselExists } from '../../models/coiModel.js';

describe('Model COI: INSERT i DELETE', () => {
  // Testowy PESEL z poprawnƒÖ sumƒÖ kontrolnƒÖ
  const testPesel = '44051401458';
  const testStatus = 'testowy';

  // Cleanup przed testami
  beforeAll(async () => {
    try {
      await deletePesel(testPesel);
      console.log('üßπ Cleanup: Usuniƒôto testowy PESEL je≈õli istnia≈Ç');
    } catch (err) {
      console.log('üßπ Cleanup: PESEL nie istnia≈Ç (OK)');
    }
  });

  // Cleanup po testach
  afterAll(async () => {
    try {
      await deletePesel(testPesel);
      console.log('üßπ Cleanup ko≈Ñcowy: Usuniƒôto testowy PESEL');
    } catch (err) {
      console.log('üßπ Cleanup ko≈Ñcowy zako≈Ñczony');
    }
  });

  // Test 1: Dodawanie PESEL
  it('powinien dodaƒá nowy PESEL do bazy', async () => {
    // Act - Dodaj PESEL
    const id = await addPesel(testPesel, testStatus);

    // Assert - Sprawd≈∫ czy zwr√≥cono ID
    expect(id).toBeDefined();
    expect(typeof id).toBe('number');
    expect(id).toBeGreaterThan(0);

    // Verify - Sprawd≈∫ czy PESEL faktycznie jest w bazie
    const results = await searchPesels(testPesel);
    expect(results).toHaveLength(1);
    expect(String(results[0].pesel)).toBe(testPesel);
    expect(results[0].status).toBe(testStatus);
  });

  // Test 2: Pr√≥ba dodania duplikatu (powinien rzuciƒá b≈ÇƒÖd)
  it('nie powinien dodaƒá tego samego PESEL dwukrotnie', async () => {
    // Arrange - PESEL ju≈º istnieje z poprzedniego testu

    // Act & Assert - Pr√≥ba dodania ponownie
    await expect(addPesel(testPesel, testStatus)).rejects.toThrow();
  });

  // Test 3: Sprawdzenie czy PESEL istnieje
  it('powinien sprawdziƒá czy PESEL istnieje w bazie', async () => {
    // Act
    const exists = await checkPeselExists(testPesel);

    // Assert
    expect(exists).toBeDefined();
    expect(exists).toHaveProperty('pesel');
    expect(String(exists.pesel)).toBe(testPesel);
    expect(exists.status).toBe(testStatus);
  });

  // Test 4: Usuwanie PESEL
  it('powinien usunƒÖƒá PESEL z bazy', async () => {
    // Act - Usu≈Ñ PESEL
    const deleted = await deletePesel(testPesel);

    // Assert - Sprawd≈∫ czy funkcja zwr√≥ci≈Ça true
    expect(deleted).toBe(true);

    // Verify - Sprawd≈∫ czy PESEL faktycznie zosta≈Ç usuniƒôty
    const results = await searchPesels(testPesel);
    expect(results).toHaveLength(0);
  });

  // Test 5: Pr√≥ba usuniƒôcia nieistniejƒÖcego PESEL
  it('powinien zwr√≥ciƒá false przy usuwaniu nieistniejƒÖcego PESEL', async () => {
    // Act - Usu≈Ñ nieistniejƒÖcy PESEL
    const deleted = await deletePesel('99999999999');

    // Assert
    expect(deleted).toBe(false);
  });

  // Test 6: Cykl ≈ºycia PESEL (INSERT -> CHECK -> DELETE)
  it('powinien przej≈õƒá pe≈Çny cykl ≈ºycia PESEL', async () => {
    const cyclePesel = '85020298765';
    
    // 1. Usu≈Ñ je≈õli istnieje
    await deletePesel(cyclePesel);

    // 2. Dodaj
    const id = await addPesel(cyclePesel, 'cykl_testowy');
    expect(id).toBeGreaterThan(0);

    // 3. Sprawd≈∫ czy istnieje
    const exists = await checkPeselExists(cyclePesel);
    expect(exists).toBeDefined();
    expect(String(exists.pesel)).toBe(cyclePesel);

    // 4. Znajd≈∫ przez wyszukiwanie
    const found = await searchPesels(cyclePesel);
    expect(found).toHaveLength(1);

    // 5. Usu≈Ñ
    const deleted = await deletePesel(cyclePesel);
    expect(deleted).toBe(true);

    // 6. Sprawd≈∫ czy nie ma w bazie
    const afterDelete = await searchPesels(cyclePesel);
    expect(afterDelete).toHaveLength(0);
  });

  // Test 7: Dodawanie z r√≥≈ºnymi statusami
  it('powinien dodaƒá PESEL z r√≥≈ºnymi statusami', async () => {
    const peselA = '92030387654';
    const peselB = '88112209876';

    // Cleanup
    await deletePesel(peselA);
    await deletePesel(peselB);

    // Dodaj z r√≥≈ºnymi statusami
    await addPesel(peselA, 'zastrze≈ºony');
    await addPesel(peselB, 'aktywny');

    // Sprawd≈∫
    const resultA = await checkPeselExists(peselA);
    const resultB = await checkPeselExists(peselB);

    expect(resultA.status).toBe('zastrze≈ºony');
    expect(resultB.status).toBe('aktywny');

    // Cleanup
    await deletePesel(peselA);
    await deletePesel(peselB);
  });

  // Test 8: Domy≈õlny status
  it('powinien u≈ºyƒá domy≈õlnego statusu je≈õli nie podano', async () => {
    const peselDefault = '77010112345';

    // Cleanup
    await deletePesel(peselDefault);

    // Dodaj bez statusu (u≈ºyje domy≈õlnego)
    await addPesel(peselDefault);

    // Sprawd≈∫
    const result = await checkPeselExists(peselDefault);
    expect(result.status).toBe('zastrze≈ºony');  // lub tw√≥j domy≈õlny status

    // Cleanup
    await deletePesel(peselDefault);
  });
});
